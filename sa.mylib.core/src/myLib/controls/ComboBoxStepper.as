/* * The contents of this file are subject to the Mozilla Public License Version * 1.1 (the "License"); you may not use this file except in compliance with * the License. You may obtain a copy of the License at  * *        http://www.mozilla.org/MPL/  * * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License * for the specific language governing rights and limitations under the License.  * * The Original Code is myLib Framework. * * The Initial Developer of the Original Code is * Samuel EMINET (aka SamYStudiO) contact@samystudio.net. * Portions created by the Initial Developer are Copyright (C) 2008-2011 * the Initial Developer. All Rights Reserved. * */package myLib.controls 
{	import myLib.assets.IAsset;	import myLib.controls.skins.IComboBoxStepperSkin;	import myLib.controls.skins.my_skinset;	import myLib.core.InvalidationType;	import myLib.events.ButtonEvent;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	/**	 * ComboBoxStepper consist of a List component that can be display or hide.	 * 	 * @author SamYStudiO ( contact@samystudio.net )	 */	public class ComboBoxStepper extends ComboBox implements IComboBoxStepper
	{		/**		 * @private		 */		protected var _comboBoxStepperSkin : IComboBoxStepperSkin;		/**		 * @private		 */		protected var _defaultNextButtonWidth : Number;				/**		 * @private		 */		protected var _defaultNextButtonHeight : Number;				/**		 * @private		 */		protected var _defaultPreviousButtonWidth : Number;				/**		 * @private		 */		protected var _defaultPreviousButtonHeight : Number;				/**		 * @private		 */		protected var _invertNextPrevious : Boolean;				[Inspectable]		/**		 * @inheritDoc		 */		public function get invertNextPrevious() : Boolean		{			return _invertNextPrevious;		}				public function set invertNextPrevious( b : Boolean ) : void		{			if( _inspector && !_isLivePreview && _invertNextPrevious ) return;						_invertNextPrevious = b;		}				/**		 * @private		 */		protected var _resizeButton : Boolean = true;				[Inspectable(defaultValue=true)]		/**		 * @inheritDoc		 */		public function get resizeButton() : Boolean		{			return _resizeButton;		}				public function set resizeButton( b : Boolean ) : void		{			if( _resizeButton == b || ( _inspector && !_isLivePreview && !_resizeButton ) ) return;						_resizeButton = b;						invalidate( InvalidationType.SIZE ); 		}				/**		 * @private		 */		protected var _nextPreviousPosition : String = StepperNextPreviousPosition.RIGHT;		[Inspectable(defaultValue="right",enumeration="left,right,top,bottom,leftRight,topBottom")]		/**		 * @inheritDoc		 */		public function get nextPreviousPosition() : String		{			return _nextPreviousPosition;		}				public function set nextPreviousPosition( s : String ) : void		{			if( _nextPreviousPosition == s || ( _inspector && !_isLivePreview && _nextPreviousPosition != StepperNextPreviousPosition.RIGHT ) ) return;						_nextPreviousPosition = s;						invalidate( InvalidationType.SIZE ); 		}				/**		 * @private		 */		protected var _textButtonSpacing : Number = 0;		[Inspectable(defaultValue=0)]		/**		 * @inheritDoc		 */		public function get textButtonSpacing() : Number		{			return _textButtonSpacing;		}				public function set textButtonSpacing( n : Number ) : void		{			if( _textButtonSpacing == n || ( _inspector && !_isLivePreview && _textButtonSpacing != 0 ) ) return;						_textButtonSpacing = n;						invalidate( InvalidationType.SIZE ); 		}				/**		 * @private		 */		protected var _nextAsset : IAsset;				/**		 * @inheritDoc		 */		public function get nextAsset() : IAsset		{			return _nextAsset;		}				/**		 * @private		 */		protected var _previousAsset : IAsset;				/**		 * @inheritDoc		 */		public function get previousAsset() : IAsset		{			return _previousAsset;		}				/**		 * Build a new ComboBoxStepper instance. Default size is 100*20.		 * @param parentContainer The parent DisplayObjectContainer where add this ComboBoxStepper.		 * @param initStyle The initial style object for ComboBoxStepper initialization.		 * @param skin The IComboBoxStepperSkin to use instead of default skin.		 * 		 * @see myLib.styles.StyleManager		 */		public function ComboBoxStepper ( parentContainer : DisplayObjectContainer = null , initStyle : Object = null , skin : IComboBoxStepperSkin = null )
		{			_comboBoxStepperSkin = skin == null ? my_skinset.getComboBoxStepperSkin() : skin;						super( parentContainer , initStyle , _comboBoxStepperSkin );		}				/**		 * @inheritDoc		 */		public override function open(  ) : void		{			if( _previousAsset is Button ) ( _previousAsset as Button ).selected = true;						super.open();		}				/**		 * @private		 */		protected override function _createChildren(  ) : void		{			super._createChildren();						_nextAsset = _comboBoxStepperSkin.getNextAsset( );			_previousAsset = _comboBoxStepperSkin.getPreviousAsset( );						_nextAsset.owner = this;			_previousAsset.owner = this;						_defaultNextButtonWidth = _nextAsset.width;			_defaultNextButtonHeight = _nextAsset.height;						_defaultPreviousButtonWidth = _previousAsset.width;			_defaultPreviousButtonHeight = _previousAsset.height;						addChild( _nextAsset as DisplayObject );			addChild( _previousAsset as DisplayObject );		}				/**		 * @private		 */		protected override function _init(  ) : void		{			super._init();						_nextAsset.addEventListener( MouseEvent.CLICK , _next , false , 0 , true );			_nextAsset.addEventListener( ButtonEvent.REPEAT_MOUSE_DOWN , _next , false , 0 , true );			_previousAsset.addEventListener( MouseEvent.CLICK , _previous , false , 0 , true );			_previousAsset.addEventListener( ButtonEvent.REPEAT_MOUSE_DOWN , _previous , false , 0 , true );						_nextAsset.focusEnabled = _previousAsset.focusEnabled = false;		}				/**		 * @private		 */		protected override function _draw(  ) : void		{			if( isInvalidate( InvalidationType.SIZE ) )			{				var r : Rectangle = _boxAsset != null ? ( _boxAsset as Sprite ).scrollRect : null;				var offset : Number = 0;										if( _autoSize )				{					_width = _getMaxSize();					_dropdownList.autoSize = true;					_dropdownList.draw();				}								switch( true ) 				{					case _nextPreviousPosition == StepperNextPreviousPosition.LEFT_RIGHT : 											if( _autoSize ) _width = Math.max( _width + _defaultNextButtonWidth + _defaultPreviousButtonWidth + _textButtonSpacing * 2 , _dropdownList.width );												if( _resizeButton ) _nextAsset.height = _previousAsset.height = _height;						else 						{							_nextAsset.height = _defaultNextButtonHeight;							_previousAsset.height = _defaultPreviousButtonHeight;						}												if( _boxAsset != null )						{							_boxAsset.setSize( _width - _defaultNextButtonWidth - _defaultPreviousButtonWidth - _textButtonSpacing * 2 , _height );							_boxAsset.x = _defaultPreviousButtonWidth + _textButtonSpacing;							_boxAsset.y = 0;							_boxAsset.draw();						}												if( _arrowButtonAsset != null )						{							_arrowButtonAsset.height = _height;							_arrowButtonAsset.x = _arrowButtonPosition == ComboBoxArrowButtonPosition.LEFT ? _defaultPreviousButtonWidth + _textButtonSpacing : _width - _arrowButtonAsset.width - _defaultNextButtonWidth - _textButtonSpacing;							_arrowButtonAsset.y = 0;							_arrowButtonAsset.draw();						}												_nextAsset.width = _defaultNextButtonWidth;						_previousAsset.width = _defaultPreviousButtonWidth;												if( r != null ) offset = r.x + r.width;												_textInput.setSize( _width - ( _arrowButtonAsset != null ? _arrowButtonAsset.width : offset ) - _defaultNextButtonWidth - _defaultPreviousButtonWidth - 2 * _textButtonSpacing , _height );						_textInput.x = _arrowButtonPosition == ComboBoxArrowButtonPosition.LEFT && _arrowButtonAsset != null ? _defaultPreviousButtonWidth + _textButtonSpacing + _arrowButtonAsset.width : _defaultPreviousButtonWidth + _textButtonSpacing;						_textInput.y = 0;						_textInput.draw();												_previousAsset.x = 0;						_previousAsset.y = ( _height - _previousAsset.height ) / 2;							_nextAsset.x = _width - _nextAsset.width;						_nextAsset.y = ( _height - _nextAsset.height ) / 2;													break;											case _nextPreviousPosition == StepperNextPreviousPosition.TOP_BOTTOM : 											if( _autoSize ) _width = Math.max( _width , _dropdownList.width );												if( _resizeButton ) _nextAsset.width = _previousAsset.width = _width;						else 						{							_nextAsset.width = _defaultNextButtonWidth;							_previousAsset.width = _defaultPreviousButtonWidth;						}												if( _boxAsset != null )						{							_boxAsset.setSize( _width , _height - _defaultNextButtonHeight - _defaultPreviousButtonHeight - 2 * _textButtonSpacing );							_boxAsset.x = 0;							_boxAsset.y = _defaultNextButtonHeight + _textButtonSpacing;						}												if( _arrowButtonAsset != null )						{							_arrowButtonAsset.height = _height - _defaultNextButtonHeight - _defaultPreviousButtonHeight - 2 * _textButtonSpacing;							_arrowButtonAsset.x = _arrowButtonPosition == ComboBoxArrowButtonPosition.LEFT ? 0 : _width - _arrowButtonAsset.width;							_arrowButtonAsset.y = _defaultNextButtonHeight + _textButtonSpacing;						}												_nextAsset.height = _defaultNextButtonHeight;						_previousAsset.height = _defaultPreviousButtonHeight;												if( r != null ) offset = r.x + r.width;												_textInput.setSize( _width - ( _arrowButtonAsset != null ? _arrowButtonAsset.width : offset ) , _height - _defaultNextButtonHeight - _defaultPreviousButtonHeight - 2 * _textButtonSpacing );						_textInput.x = _arrowButtonPosition == ComboBoxArrowButtonPosition.LEFT && _arrowButtonAsset != null ? _arrowButtonAsset.width : 0;						_textInput.y = _defaultNextButtonHeight + _textButtonSpacing;						_textInput.draw();												_nextAsset.x = ( _width - _nextAsset.width ) / 2;						_nextAsset.y = 0;							_previousAsset.x = ( _width - _previousAsset.width ) / 2;						_previousAsset.y = _height - _previousAsset.height;													break;											case _nextPreviousPosition == StepperNextPreviousPosition.LEFT : 											if( _autoSize ) _width = Math.max( _width + _defaultNextButtonWidth + _textButtonSpacing , _dropdownList.width );												if( _resizeButton ) _nextAsset.height = _previousAsset.height = _height / 2;						else 						{							_nextAsset.height = _defaultNextButtonHeight;							_previousAsset.height = _defaultPreviousButtonHeight;						}												if( _boxAsset != null )						{							_boxAsset.setSize( _width - _defaultNextButtonWidth - _textButtonSpacing , _height );							_boxAsset.x = _defaultNextButtonWidth + _textButtonSpacing;							_boxAsset.y = 0;						}												if( _arrowButtonAsset != null )						{							_arrowButtonAsset.height = _height;							_arrowButtonAsset.x = _arrowButtonPosition == ComboBoxArrowButtonPosition.LEFT ? _defaultNextButtonWidth + _textButtonSpacing : _width - _arrowButtonAsset.width;							_arrowButtonAsset.y = 0;						}												_nextAsset.width = _defaultNextButtonWidth;						_previousAsset.width = _defaultPreviousButtonWidth;												if( r != null ) offset = r.x + r.width;												_textInput.setSize( _width - ( _arrowButtonAsset != null ? _arrowButtonAsset.width : offset ) - _nextAsset.width - _textButtonSpacing , _height );						_textInput.x = _arrowButtonPosition == ComboBoxArrowButtonPosition.LEFT && _arrowButtonAsset != null ? _nextAsset.width + _textButtonSpacing + _arrowButtonAsset.width : _nextAsset.width + _textButtonSpacing;						_textInput.y = 0;						_textInput.draw();												_nextAsset.x = _previousAsset.x = 0;						_nextAsset.y = ( _height / 2 ) - _nextAsset.height;						_previousAsset.y = ( _height / 2 );												break;											case _nextPreviousPosition == StepperNextPreviousPosition.TOP : 											if( _autoSize ) _width = Math.max( _width , _dropdownList.width );												if( _resizeButton ) _nextAsset.width = _previousAsset.width = _width / 2;						else 						{							_nextAsset.width = _defaultNextButtonWidth;							_previousAsset.width = _defaultPreviousButtonWidth;						}												if( _boxAsset != null )						{							_boxAsset.setSize( _width , _height - _defaultNextButtonHeight - _textButtonSpacing );							_boxAsset.x = 0;							_boxAsset.y = _defaultNextButtonHeight + _textButtonSpacing;						}												if( _arrowButtonAsset != null )						{							_arrowButtonAsset.height = _height - _defaultNextButtonHeight - _textButtonSpacing;							_arrowButtonAsset.x = _arrowButtonPosition == ComboBoxArrowButtonPosition.LEFT ? 0 : _width - _arrowButtonAsset.width;							_arrowButtonAsset.y = _defaultNextButtonHeight + _textButtonSpacing;						}												_nextAsset.height = _defaultNextButtonHeight;						_previousAsset.height = _defaultPreviousButtonHeight;												if( r != null ) offset = r.x + r.width;												_textInput.setSize( _width - ( _arrowButtonAsset != null ? _arrowButtonAsset.width : offset ) , _height - _defaultNextButtonHeight - _textButtonSpacing );						_textInput.x = _arrowButtonPosition == ComboBoxArrowButtonPosition.LEFT && _arrowButtonAsset != null ? _arrowButtonAsset.width : 0;						_textInput.y = _defaultNextButtonHeight + _textButtonSpacing;						_textInput.draw();												_nextAsset.x = ( _width / 2 );						_nextAsset.y = 0;						_previousAsset.x = ( _width / 2 ) - _previousAsset.width;						_previousAsset.y = 0;												break;											case _nextPreviousPosition == StepperNextPreviousPosition.BOTTOM : 												if( _autoSize ) _width = Math.max( _width , _dropdownList.width );												if( _resizeButton ) _nextAsset.width = _previousAsset.width = _width / 2;						else 						{							_nextAsset.width = _defaultNextButtonWidth;							_previousAsset.width = _defaultPreviousButtonWidth;						}												if( _boxAsset != null )						{							_boxAsset.setSize( _width , _height - _defaultNextButtonHeight - _textButtonSpacing );							_boxAsset.x = 0;							_boxAsset.y = 0;						}												if( _arrowButtonAsset != null )						{							_arrowButtonAsset.height = _height - _defaultNextButtonHeight - _textButtonSpacing;							_arrowButtonAsset.x = _arrowButtonPosition == ComboBoxArrowButtonPosition.LEFT ? 0 : _width - _arrowButtonAsset.width;							_arrowButtonAsset.y = 0;						}												_nextAsset.height = _defaultNextButtonHeight;						_previousAsset.height = _defaultPreviousButtonHeight;												if( r != null ) offset = r.x + r.width;												_textInput.setSize( _width - ( _arrowButtonAsset != null ? _arrowButtonAsset.width : offset ) , _height - _defaultNextButtonHeight - _textButtonSpacing );						_textInput.x = _arrowButtonPosition == ComboBoxArrowButtonPosition.LEFT && _arrowButtonAsset != null ? _arrowButtonAsset.width : 0;						_textInput.y = 0;						_textInput.draw();												_nextAsset.x = ( _width / 2 );						_nextAsset.y = _height - _nextAsset.height;						_previousAsset.x = ( _width / 2 ) - _previousAsset.width;						_previousAsset.y = _height - _nextAsset.height;												break;											default :												if( _autoSize ) _width = Math.max( _width + _defaultNextButtonWidth + _textButtonSpacing , _dropdownList.width );												if( _resizeButton ) _nextAsset.height = _previousAsset.height = _height / 2;						else 						{							_nextAsset.height = _defaultNextButtonHeight;							_previousAsset.height = _defaultPreviousButtonHeight;						}												if( _boxAsset != null )						{							_boxAsset.setSize( _width - _defaultNextButtonWidth - _textButtonSpacing , _height );							_boxAsset.x = 0;							_boxAsset.y = 0;						}												if( _arrowButtonAsset != null )						{							_arrowButtonAsset.height = _height;							_arrowButtonAsset.x = _arrowButtonPosition == ComboBoxArrowButtonPosition.LEFT ? 0 : _width - _arrowButtonAsset.width - _defaultNextButtonWidth - _textButtonSpacing;							_arrowButtonAsset.y = 0;						}												_nextAsset.width = _defaultNextButtonWidth;						_previousAsset.width = _defaultPreviousButtonWidth;												_textInput.x = 0;						_textInput.y = 0;						_textInput.setSize( _width - _nextAsset.width - _textButtonSpacing , _height );												if( r != null ) offset = r.x + r.width;												_textInput.setSize( _width - ( _arrowButtonAsset != null ? _arrowButtonAsset.width : offset ) - _defaultNextButtonWidth - _textButtonSpacing , _height );						_textInput.x = _arrowButtonPosition == ComboBoxArrowButtonPosition.LEFT && _arrowButtonAsset != null ? _arrowButtonAsset.width : 0;						_textInput.y = 0;						_textInput.draw();												_nextAsset.x = _previousAsset.x = _width - _nextAsset.width;						_nextAsset.y = ( _height / 2 ) - _nextAsset.height;						_previousAsset.y = ( _height / 2 );												_nextPreviousPosition = StepperNextPreviousPosition.RIGHT;				}									_nextAsset.draw();				_previousAsset.draw();								_updateDropdownListSize();					}		}				/**		 * @private		 */		protected function _next( e : Event = null ) : void		{			if( e is ButtonEvent ) _nextAsset.removeEventListener( MouseEvent.CLICK , _next );						if( _invertNextPrevious ) previous();			else next();		}		/**		 * @private		 */		protected function _previous( e : Event = null ) : void		{			if( e is ButtonEvent ) _previousAsset.removeEventListener( MouseEvent.CLICK , _previous );						if( _invertNextPrevious ) next();			else previous();		}
	}}