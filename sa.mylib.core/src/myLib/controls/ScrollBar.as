/* * The contents of this file are subject to the Mozilla Public License Version * 1.1 (the "License"); you may not use this file except in compliance with * the License. You may obtain a copy of the License at  * *        http://www.mozilla.org/MPL/  * * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License * for the specific language governing rights and limitations under the License.  * * The Original Code is myLib. * * The Initial Developer of the Original Code is * Samuel EMINET (aka SamYStudiO) contact@samystudio.net. * Portions created by the Initial Developer are Copyright (C) 2008-2011 * the Initial Developer. All Rights Reserved. * */package myLib.controls {	import myLib.assets.IAsset;	import myLib.controls.skins.IScrollBarSkin;	import myLib.controls.skins.my_skinset;	import myLib.core.AScroll;	import myLib.core.IScroll;	import myLib.core.InvalidationType;	import myLib.my_internal;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.InteractiveObject;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.ui.Keyboard;	import flash.utils.clearTimeout;	import flash.utils.setTimeout;		use namespace my_internal;		/**
	 * ScrollBar use up, down, thumb and thumb background controls to scroll content.	 * 	 * @author SamYStudiO
	 */
	public class ScrollBar extends AScroll implements IScrollBar	{		/**		 * @private		 */		protected var _scrollBarSkin : IScrollBarSkin;
		/**		 * @private		 */		protected var _pressTimeoutID : uint;				/**		 * @private		 */		protected var _currentTarget : IAsset;				/**		 * @private		 */		protected var _thumbMin : Number;				/**		 * @private		 */		protected var _thumbMax : Number;				/**		 * @private		 */		protected var _thumbOffset : Number;				/**		 * @private		 */		protected override function get _defaultWidth() : Number		{			return 15;			}				/**		 * @private		 */		protected override function get _defaultHeight() : Number		{			return 100;			}				/**		 * @private		 */		protected var _visibleOnUseless : Boolean;				/**		 * @inheritDoc		 */		public function get visibleOnUseless() : Boolean		{			return _visibleOnUseless;		}				public function set visibleOnUseless( b : Boolean ) : void		{			_visibleOnUseless = b;		}				/**		 * @private		 */		protected var _autoRepeatTimeout : uint = 250;				[Inspectable(defaultValue=250)]		/**		 * @inheritDoc		 */		public function get autoRepeatTimeout() : uint		{			return _autoRepeatTimeout;		}				public function set autoRepeatTimeout( n : uint ) : void		{			if( _inspector && !_isLivePreview && _autoRepeatTimeout != 250 ) return;						_autoRepeatTimeout = n;		}				/**		 * @private		 */		protected var _mouseWheelEnabled : Boolean = true;				[Inspectable(defaultValue=true)]		/**		 * @inheritDoc		 */		public function get mouseWheelEnabled() : Boolean		{			return _mouseWheelEnabled;		}				public function set mouseWheelEnabled( b : Boolean ) : void		{			if( _inspector && !_isLivePreview && !_mouseWheelEnabled ) return;						_mouseWheelEnabled = b;		}				/**		 * @private		 */		protected var _mouseWheelNeedTargetFocus : Boolean;				[Inspectable(defaultValue=false)]		/**		 * @inheritDoc		 */		public function get mouseWheelNeedTargetFocus() : Boolean		{			return _mouseWheelNeedTargetFocus;		}				public function set mouseWheelNeedTargetFocus( b : Boolean ) : void		{			if( _inspector && !_isLivePreview && _mouseWheelNeedTargetFocus ) return;						_mouseWheelNeedTargetFocus = b;		}				/**		 * @private		 */		protected var _upDownPosition : String = ScrollBarUpDownPosition.TOP_BOTTOM;		[Inspectable(defaultValue="topBottom",enumeration="top,topBottom,bottom")]		/**		 * @inheritDoc		 */		public function get upDownPosition() : String		{			return _upDownPosition;		}				public function set upDownPosition( s : String ) : void		{			if( _upDownPosition == s || ( _inspector && !_isLivePreview && _upDownPosition != ScrollBarUpDownPosition.TOP_BOTTOM ) ) return;						_upDownPosition = s;						invalidate( InvalidationType.SIZE );		}				/**		 * @private		 */		protected var _autoHideUpDown : Boolean = false;				[Inspectable(defaultValue=false)]		/**		 * @inheritDoc		 */		public function get autoHideUpDown() : Boolean		{			return _autoHideUpDown;		}				public function set autoHideUpDown( b : Boolean ) : void		{			if( _autoHideUpDown == b || ( _inspector && !_isLivePreview && !_autoHideUpDown ) ) return;						_autoHideUpDown = b;		}				/**		 * @private		 */		protected var _useUpDown : Boolean = true;				[Inspectable(defaultValue=true)]		/**		 * @inheritDoc		 */		public function get useUpDown() : Boolean		{			return _useUpDown;		}				public function set useUpDown( b : Boolean ) : void		{			if( _useUpDown == b || ( _inspector && !_isLivePreview && !_useUpDown ) ) return;						_upAsset.visible = _downAsset.visible = _useUpDown = b;						invalidate( InvalidationType.SIZE ); 		}		/**		 * @private		 */		protected var _useThumb : Boolean = true;				[Inspectable(defaultValue=true)]		/**		 * @inheritDoc		 */		public function get useThumb() : Boolean		{			return _useThumb;		}				public function set useThumb( b : Boolean ) : void		{			if( _useThumb == b || ( _inspector && !_isLivePreview && !_useThumb ) ) return;						_thumbAsset.visible = _useThumb = _enabled && b;						_thumbBackgroundAsset.mouseEnabled = b && _enabled;		}				/**		 * @private		 */		protected var _useThumbBackground : Boolean = true;				[Inspectable(defaultValue=true)]		/**		 * @inheritDoc		 */		public function get useThumbBackground() : Boolean		{			return _useThumbBackground;		}				public function set useThumbBackground( b : Boolean ) : void		{			if( _useThumbBackground == b || ( _inspector && !_isLivePreview && !_useThumbBackground ) ) return;						_thumbBackgroundAsset.visible = _useThumbBackground = b;		}				/**		 * @private		 */		protected var _thumbResizeEnabled : Boolean = true;		[Inspectable(defaultValue=true)]		/**		 * @inheritDoc		 */		public function get thumbResizeEnabled() : Boolean		{			return _thumbResizeEnabled;		}				public function set thumbResizeEnabled( b : Boolean ) : void		{			if( _thumbResizeEnabled == b || ( _inspector && !_isLivePreview && !_thumbResizeEnabled ) ) return;						_thumbResizeEnabled = b;						if( !b ) _thumbAsset.scaleX = _thumbAsset.scaleY = 1;						invalidate( InvalidationType.SIZE );		}				/**		 * @private		 */		protected var _thumbMinimumSize : Number = 10;				[Inspectable(defaultValue=10)]		/**		 * @inheritDoc		 */		public function get thumbMinimumSize() : Number		{			return _thumbMinimumSize;		}				public function set thumbMinimumSize( n : Number ) : void		{			if( _thumbMinimumSize == n || ( _inspector && !_isLivePreview && _thumbMinimumSize != 10 ) ) return;						_thumbMinimumSize = n;						invalidate( InvalidationType.SIZE );		}				/**		 * @private		 */		protected var _mouseWheelDeltaSize : Number = 3;		[Inspectable(defaultValue=3)]		/**		 * @inheritDoc		 */		public function get mouseWheelDeltaSize() : Number		{			return _mouseWheelDeltaSize;		}				public function set mouseWheelDeltaSize( size : Number ) : void		{			if( _inspector && !_isLivePreview && _mouseWheelDeltaSize != 3 ) return;						_mouseWheelDeltaSize = size;		}				/**			 * @private		 */		protected var _upAsset : IAsset;				/**		 * @inheritDoc		 */		public function get upAsset() : IAsset		{			return _upAsset;		}				/**		 * @private		 */		protected var _downAsset : IAsset;				/**		 * @inheritDoc		 */		public function get downAsset() : IAsset		{			return _downAsset;		}				/**		 * @private		 */		protected var _thumbAsset : IAsset;				/**		 * @inheritDoc		 */		public function get thumbAsset() : IAsset		{			return _thumbAsset;		}				/**		 * @private		 */			protected var _thumbBackgroundAsset : IAsset;				/**		 * @inheritDoc		 */		public function get thumbBackgroundAsset() : IAsset		{			return _thumbBackgroundAsset;		}				/**		 * @inheritDoc		 */		public override function get scrollTarget () : DisplayObject		{			return super._scrollTarget;		}				public override function set scrollTarget( o : DisplayObject ) : void		{			if( o == _scrollTarget ) return;						super.scrollTarget = o;						if( o is InteractiveObject ) _focusTarget = o as InteractiveObject;			else _focusTarget = null;		}				[Inspectable(defaultValue=true)]		/**		 * @inheritDoc		 */		public override function get enabled() : Boolean		{			return super.enabled;		}				public override function set enabled( b : Boolean ) : void		{			if( _enabled == b || ( _inspector && !_isLivePreview && !super.enabled ) ) return;						_upAsset.enabled = _downAsset.enabled =			_thumbAsset.visible = _thumbBackgroundAsset.enabled = b;						_thumbBackgroundAsset.mouseEnabled = _useThumb ? b : false;						super.enabled = b;		}				/**		 * @inheritDoc		 */		public override function get wrapTarget() : Boolean		{			return false;		}		/**		 * Build a new ScrollBar instance. Default size is 15*100.		 * @param parentContainer The parent DisplayObjectContainer where add this ScrollBar.		 * @param initStyle The initial style object for ScrollBar initialization.		 * @param skin The IScrollBarSkin to use instead of default skin.		 * 		 * @see myLib.styles.StyleManager		 */		public function ScrollBar ( parentContainer : DisplayObjectContainer = null , initStyle : Object = null , skin : IScrollBarSkin = null )
		{			_scrollBarSkin = skin == null ? my_skinset.getScrollBarSkin() : skin;						super( parentContainer , initStyle , _scrollBarSkin );		}				/**		 * @inheritDoc		 */		public override function setScrollPosition ( pos : Number , percentage : Boolean = false ) : void		{			super.setScrollPosition( pos , percentage );						if( _autoHideUpDown )			{				_upAsset.visible = _scrollPosition != 0;				_downAsset.visible = _scrollPosition != _maxScroll;			}			}		/**		 * @private		 */		protected override function _createChildren(  ) : void		{			_upAsset = _scrollBarSkin.getUpAsset();			_downAsset = _scrollBarSkin.getDownAsset();			_thumbAsset = _scrollBarSkin.getThumbAsset();			_thumbBackgroundAsset = _scrollBarSkin.getThumbBackgroundAsset();						if( _upAsset == null ) throw new Error( this + " up asset is missing" );			if( _downAsset == null ) throw new Error( this + " down asset is missing" );			if( _thumbAsset == null ) throw new Error( this + " thumb asset is missing" );			if( _thumbBackgroundAsset == null ) throw new Error( this + " thumbBackground asset is missing" );			_upAsset.owner = this;			_downAsset.owner = this;			_thumbAsset.owner = this;			_thumbBackgroundAsset.owner = this;			addChild( _upAsset as DisplayObject );			addChild( _downAsset as DisplayObject );			addChild( _thumbBackgroundAsset as DisplayObject );			addChild( _thumbAsset as DisplayObject );		}				/**		 * @private		 */		protected override function _init(  ) : void		{			super._init();						_upAsset.focusEnabled = false;			_downAsset.focusEnabled = false;			_thumbAsset.focusEnabled = false;			_thumbBackgroundAsset.focusEnabled = false;						_upAsset.addEventListener( MouseEvent.MOUSE_DOWN , _assetDown , false , 0 , true );			_downAsset.addEventListener( MouseEvent.MOUSE_DOWN , _assetDown , false , 0 , true );			_thumbAsset.addEventListener( MouseEvent.MOUSE_DOWN , _thumbDown , false , 0 , true );			_thumbBackgroundAsset.addEventListener( MouseEvent.MOUSE_DOWN , _assetDown , false , 0 , true );						_upAsset.addEventListener( MouseEvent.MOUSE_UP , _assetUp , false , 0 , true );			_downAsset.addEventListener( MouseEvent.MOUSE_UP , _assetUp , false , 0 , true );			_thumbAsset.addEventListener( MouseEvent.MOUSE_UP , _assetUp , false , 0 , true );			_thumbBackgroundAsset.addEventListener( MouseEvent.MOUSE_UP , _assetUp , false , 0 , true );						_upAsset.addEventListener( MouseEvent.ROLL_OUT , _assetUp , false , 0 , true );			_downAsset.addEventListener( MouseEvent.ROLL_OUT , _assetUp , false , 0 , true );			_thumbBackgroundAsset.addEventListener( MouseEvent.ROLL_OUT , _assetUp , false , 0 , true );						if( stage != null )				stage.addEventListener( MouseEvent.MOUSE_WHEEL , _wheel , false , 0 , true );			else			{				addEventListener( Event.ADDED_TO_STAGE , _added , false , 0 , true );			}						addEventListener( Event.REMOVED_FROM_STAGE , _removed , false , 0 , true );			addEventListener( MouseEvent.MOUSE_WHEEL , _wheel , false , 0 , true );						_focusEnabled = true;		}				/**		 * @private		 */		protected override function _draw(  ) : void		{			if( isInvalidate( InvalidationType.SIZE , InvalidationType.DATA ) )			{				_setScrollProperties( );								if( _thumbResizeEnabled )				{					var sh : Number = _height - ( _useUpDown ? _upAsset.height + _downAsset.height : 0 );					var r : Number = pageSize / _scrollTargetSize;					var h : Number = sh * Math.min( 1 , r );										if( !_isLivePreview )						_thumbAsset.height = h > _thumbMinimumSize ? h : _thumbMinimumSize;										_thumbMax = _getThumbMax();										if( !isInvalidate( InvalidationType.SIZE ) ) _thumbAsset.draw();				}			}						if( isInvalidate( InvalidationType.SIZE ) )			{				_thumbMax = _getThumbMax();								switch( _upDownPosition )				{					case ScrollBarUpDownPosition.TOP :						case ScrollBarUpDownPosition.LEFT :							_thumbMin = _useUpDown ? _upAsset.height + _downAsset.height : 0;						_upAsset.y = 0;						_downAsset.y = _upAsset.height;						break;											case ScrollBarUpDownPosition.BOTTOM :						case ScrollBarUpDownPosition.RIGHT :							_thumbMin = 0;						_upAsset.y = _height - _downAsset.height - _upAsset.height;						_downAsset.y = _height - _downAsset.height;						break;											default :							_thumbMin = _useUpDown ? _upAsset.height : 0;						_upAsset.y = 0;						_downAsset.y = _height - _downAsset.height;						break;										}								_thumbAsset.y = _thumbBackgroundAsset.y = _thumbMin;				_thumbBackgroundAsset.height = Math.max( 0 , _height - ( _useUpDown ? _upAsset.height + _downAsset.height : 0 ) );								_upAsset.width = _downAsset.width = _thumbAsset.width = _thumbAsset.width = _thumbBackgroundAsset.width = _width;								_upAsset.draw();				_downAsset.draw();				_thumbAsset.draw();				_thumbBackgroundAsset.draw();			}						var wasVisible : Boolean = _visible;						visible = _useful = _isLivePreview ? true : pageSize < _scrollTargetSize;						_tween.stop();						if( _visible && !wasVisible )			{				_setScrollPosition( _scrollPositionPercentageOnVisible );				}			else			{				if( !_visible ) _scrollPosition = _scrollPositionPercentage = 0;								if( !_lockPosition ) _setScrollPosition( _scrollPositionPercentage , true );				else _setScrollPosition( _scrollPosition );								if ( !_visible && wasVisible && _scrollTarget != null ) _scrollTarget.scrollRect = null;			}		}				/**		 * @private		 */		protected function _getThumbMax(  ) : Number		{			switch( _upDownPosition )			{				case ScrollBarUpDownPosition.TOP :					case ScrollBarUpDownPosition.LEFT :						return _thumbMax = _height - _thumbAsset.height;									case ScrollBarUpDownPosition.BOTTOM :					case ScrollBarUpDownPosition.RIGHT :						return _thumbMax = _height - ( _useUpDown ? _upAsset.height + _downAsset.height : 0 ) - _thumbAsset.height;							default :						return _thumbMax = _height - ( _useUpDown ? _downAsset.height : 0 ) - _thumbAsset.height;			}		}				/**		 * @private		 */		protected override function _added( e : Event ) : void		{			if( stage )				stage.addEventListener( MouseEvent.MOUSE_WHEEL , _wheel , false , 0 , true );						super._added( e );		}				/**		 * @private		 */		protected function _removed( e : Event ) : void		{			if( stage )				stage.removeEventListener( MouseEvent.MOUSE_WHEEL , _wheel );		}				/**		 * @private		 */		protected override function _scroll( e : Event = null , size : Number = NaN ) : Number		{			switch( _currentTarget ) 			{				case _upAsset : 					size = _isScrollableTextField && !_horizontal ? -1 : -_scrollSize;					break;				case _downAsset : 					size = _isScrollableTextField && !_horizontal ? 1 : _scrollSize;					break;				case _thumbAsset : 					break;				case _thumbBackgroundAsset : 					size = mouseY > _thumbAsset.y ? pageSize : -pageSize;					break;			}						var nextPos : Number;						if( isNaN( size ) )			{				var offset : Number = mouseY - _thumbOffset;				offset = Math.max( _thumbMin , Math.min( _thumbMax , offset ) );								var r : Number = ( offset - _thumbMin ) / ( _thumbMax - _thumbMin );				nextPos = _maxScroll * r;								if( !isNaN( _scrollSnap ) && r != 1 && !_isScrollableTextField )				{					var m : Number = nextPos % _scrollSnap;					var sens : int = m < _scrollSnap / 2 ? -1 : 1;										nextPos = nextPos + ( nextPos < _scrollSnap / 2 ? nextPos : nextPos < _scrollSnap ? _scrollSnap - nextPos : m < _scrollSnap / 2 ? m : _scrollSnap - m ) * sens;				}			}			else			{				if( _currentTarget == _thumbBackgroundAsset && ( size > 0 && _thumbAsset.y + _thumbAsset.height > mouseY || size < 0 && _thumbAsset.y < mouseY ) )				{					_timer.stop( );					return getScrollPosition( );				}								nextPos = _scrollPosition + size;								if( !isNaN( _scrollSnap ) )				{					nextPos = Math.round( nextPos / _scrollSnap ) *_scrollSnap;				}			}						if( _scrollTweenFunction != null && _scrollPosition != nextPos )			{				if( _tween.running )				{					_tween.setProp( my_internal::_setScrollPosition , _scrollTweenFunction , _scrollPosition , nextPos );					_tween.seek( 0 );				}				else _tween.addProp( my_internal::_setScrollPosition , _scrollTweenFunction , _scrollPosition , nextPos );								_tween.duration = _scrollTweenDuration;				_tween.start( );			}			else setScrollPosition( nextPos );						return _scrollPosition;		}				/**		 * @private		 */		protected override function _registerTarget ( o : DisplayObject ) : void		{			super._registerTarget( o );						o.addEventListener( MouseEvent.MOUSE_WHEEL , _wheel , false , 0 , true );			o.addEventListener( Event.SCROLL , _updateThumb , false , 0 , true );						if( !_isScrollableTextField )				o.addEventListener( KeyboardEvent.KEY_DOWN , _keyDown , false , 0 , true );		}				/**		 * @private		 */		protected override function _removeRegisteredTarget( o : DisplayObject ) : void		{			super._removeRegisteredTarget( o );						o.removeEventListener( MouseEvent.MOUSE_WHEEL , _wheel );			o.removeEventListener( Event.SCROLL , _updateThumb );						if( !_isScrollableTextField )				o.removeEventListener( KeyboardEvent.KEY_DOWN , _keyDown );		}				/**		 * @private		 */		protected function _keyDown ( e : KeyboardEvent ) : void		{			if( !_useful || !_keyboardEnabled ) return;						var opScroll : IScroll = _getOpScroll( );			var b : Boolean = opScroll == null || !opScroll.enabled;			var code : Number = e.keyCode;			var scrollSize : Number = _isScrollableTextField && !_horizontal ? 1 : _scrollSize;						switch( true )			{				case code == Keyboard.LEFT 		&& _horizontal  		: 				case code == Keyboard.LEFT 		&& !_horizontal && b 	: 				case code == Keyboard.UP 		&& _horizontal && b 	: 				case code == Keyboard.UP 		&& !_horizontal 		: scroll( -scrollSize ); return;				case code == Keyboard.RIGHT 	&& _horizontal  		: 				case code == Keyboard.RIGHT 	&& !_horizontal && b	: 				case code == Keyboard.DOWN 		&& _horizontal && b 	: 				case code == Keyboard.DOWN 		&& !_horizontal 		: scroll( scrollSize );	return;								case code == Keyboard.PAGE_UP 	&& _horizontal && b    	: 				case code == Keyboard.PAGE_UP 	&& !_horizontal         : scroll( -pageSize ); return;				case code == Keyboard.PAGE_DOWN && _horizontal && b     : 				case code == Keyboard.PAGE_DOWN && !_horizontal         : scroll( pageSize ); return;				case code == Keyboard.HOME 		&& _horizontal && b     : 				case code == Keyboard.HOME 		&& !_horizontal         : scroll( -_scrollPosition ); return;				case code == Keyboard.END 		&& _horizontal && b     : 				case code == Keyboard.END 		&& !_horizontal        	: scroll( _maxScroll - _scrollPosition ); return;			}		}				/**		 * @private		 */		protected function _assetDown ( e : MouseEvent ) : void		{			_currentTarget = e.currentTarget as IAsset;			_timer.delay = _isScrollableTextField && !_horizontal ? 1000 / 12 : 1;						_scroll( );						if( _autoRepeatTimeout && _currentTarget != _thumbAsset && _scrollTweenFunction == null )			{				clearTimeout( _pressTimeoutID );				_pressTimeoutID = setTimeout( _start , _autoRepeatTimeout );			}			else _start( );		}				/**		 * @private		 */		protected function _thumbDown ( e : MouseEvent ) : void		{			_currentTarget = e.currentTarget as IAsset;			_thumbOffset = mouseY - _thumbAsset.y;						if( stage != null )			{				stage.addEventListener( MouseEvent.MOUSE_MOVE , _scroll , false , 0 , true );				stage.addEventListener( MouseEvent.MOUSE_UP , _thumbReleaseOutside , false , 0 , true );			}		}		/**		 * @private		 */		protected function _assetUp ( e : MouseEvent = null ) : void		{			_timer.stop( );			_currentTarget = null;						if( stage != null && ( e == null || e.type == MouseEvent.MOUSE_UP ) )				stage.removeEventListener( MouseEvent.MOUSE_MOVE , _scroll );						clearTimeout( _pressTimeoutID );		}				/**		 * @private		 */		protected function _updateThumb( e : Event ) : void		{			var tf : TextField = _scrollTarget as TextField;						setScrollPosition( _horizontal ? tf.scrollH : tf.scrollV - 1 );		}				/**		 * @private		 */		// TODO sometimes called twice		protected function _wheel ( e : MouseEvent ) : void		{			if( !_useful || ( e.currentTarget == stage && !_mouseWheelNeedTargetFocus ) || ( e.currentTarget != stage && _mouseWheelNeedTargetFocus ) ) return;						var opScroll : IScroll = _getOpScroll( );			var canWheel : Boolean =  _mouseWheelEnabled && _enabled && ( !_mouseWheelNeedTargetFocus || ( _mouseWheelNeedTargetFocus && _scrollTarget.stage.focus == _scrollTarget ) ) &&										( opScroll == null || opScroll.direction == ScrollDirection.HORIZONTAL || !opScroll.enabled || !opScroll.useful ||										 ( opScroll is ScrollBar && !( ( opScroll as ScrollBar ).mouseWheelEnabled ) ) );						if( !canWheel ) return;						var sens : int = e.delta > 0 ? -1 : 1;						if( _mouseWheelDeltaSize == 0 ) scroll( sens * pageSize );			else			{				var size : Number = isNaN( _mouseWheelDeltaSize ) ? Math.abs( e.delta ) : _mouseWheelDeltaSize;							scroll( sens * size * ( _isScrollableTextField ? 1 : _scrollSize ) );			}						e.stopPropagation();		}				/**		 * @private		 */		my_internal override function _setScrollPosition( position : Number , percentage : Boolean = false ) : void		{			super._setScrollPosition( position , percentage );						var r : Number = _scrollPositionPercentage / 100;			var y : Number = _thumbMin + ( _thumbMax - _thumbMin ) * r;			_thumbAsset.y = isNaN( r ) ? _thumbMin : y;		}				/**		 *		 */		private function _start(  ) : void		{			clearTimeout( _pressTimeoutID );			_timer.start( );		}				/**		 *		 */		private function _thumbReleaseOutside( e : MouseEvent ) : void		{			if( e.target != _thumbAsset ) _assetUp();						if( stage != null )				stage.removeEventListener( MouseEvent.MOUSE_UP  , _thumbReleaseOutside );		}	}
}
