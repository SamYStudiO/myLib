/* * The contents of this file are subject to the Mozilla Public License Version * 1.1 (the "License"); you may not use this file except in compliance with * the License. You may obtain a copy of the License at  * *        http://www.mozilla.org/MPL/  * * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License * for the specific language governing rights and limitations under the License.  * * The Original Code is myLib. * * The Initial Developer of the Original Code is * Samuel EMINET (aka SamYStudiO) contact@samystudio.net. * Portions created by the Initial Developer are Copyright (C) 2008-2011 * the Initial Developer. All Rights Reserved. * */package myLib.displayUtils {
	import myLib.displayUtils.AlignmentPoint;
	import myLib.displayUtils.USE_PIXEL_SNAPPING;
	
	import flash.display.DisplayObject;
	import flash.display.DisplayObjectContainer;
	import flash.geom.Point;
	import flash.geom.Rectangle;	
	/**
	 * AlignmentManager is useful for layout. It allows move DisplayObject wtih a specific alignement ( flash default is top left )	 * within a specific corrdinate space ( flash default is DisplayObject parent).	 * 	 * @author SamYStudiO ( contact@samystudio.net )
	 */
	public final class AlignmentManager 	{		/**		 * @private		 */		public function AlignmentManager()		{			throw new Error( this + " cannot be instantiated" );		}				/**		 * Get coordinates from a DisplayObject as a Point that reflects the specified alignment point and coordinate space. 		 * @param o The DisplayObject from which retrieve coordinates informations.		 * @param alignmentPoint An alignment point as defined in AlignmentPoint constants.		 * @param targetCoordinateSpace The displayObjectContainer that defined the coordinate space to use. If target is null current DisplayObject coordinate space ( its parent ) is used.		 * @param fromX The DisplayObject x coordinate to use for retrieving Point. Leave empty or NaN to retrieve Point with actual DisplayObject x coordinate.		 * @param fromY The DisplayObject y coordinate to use for retrieving Point. Leave empty or NaN to retrieve Point with actual DisplayObject y coordinate.		 * @param useGetBounds By default point is retrieve using DisplayObject.getRect() method, set useGetBounds to true to use DisplayObect.getBounds() insteadof DisplayObject.getRect().		 * @return A point with coordinates that reflects the specified alignment point and coordinate space.		 * 		 * @see AlignmentPoint		 */		public static function getAlignmentPoint ( o : DisplayObject , alignmentPoint : String , targetCoordinateSpace : DisplayObjectContainer = null , fromX : Number = NaN , fromY : Number = NaN , useGetBounds : Boolean = false ) : Point		{			if( isNaN( fromX ) ) fromX = o.x;			if( isNaN( fromY ) ) fromY = o.y;						targetCoordinateSpace = targetCoordinateSpace == null ? o.parent : targetCoordinateSpace;						var p : Point = new Point( );			var r : Rectangle = useGetBounds ? o.getBounds( targetCoordinateSpace ) : o.getRect( targetCoordinateSpace );						var xMax : Number = r.x + o.width;			var yMax : Number = r.y + o.height;						switch( alignmentPoint )			{				case AlignmentPoint.TOP_LEFT :					p.x = fromX + ( o.x - r.x ); 					p.y = fromY + ( o.y - r.y ); 										break;								case AlignmentPoint.TOP :					p.x = fromX - ( o.width / 2 ) + ( o.x - r.x ); 					p.y = fromY + ( o.y - r.y ); 										break;									case AlignmentPoint.TOP_RIGHT :					p.x = fromX - ( xMax - o.x ); 					p.y = fromY + ( o.y - r.y ); 										break;									case AlignmentPoint.LEFT :					p.x = fromX + ( o.x - r.x ); 					p.y = fromY - ( yMax - r.y ) / 2 + ( o.y - r.y ); 										break;					case AlignmentPoint.RIGHT :					p.x = fromX - ( xMax - o.x );					p.y = fromY - ( o.height / 2 ) + ( o.y - r.y ); 										break;					case AlignmentPoint.BOTTOM_LEFT :					p.x = fromX + ( o.x - r.x ); 					p.y = fromY - ( yMax - o.y );										break;					case AlignmentPoint.BOTTOM :					p.x = fromX - ( o.width / 2 ) + ( o.x - r.x ); 					p.y = fromY - ( yMax - o.y );										break;									case AlignmentPoint.BOTTOM_RIGHT :					p.x = fromX - ( xMax - o.x ); 					p.y = fromY - ( o.height ); 										break;									default :					p.x = fromX - ( o.width / 2 ) + ( o.x - r.x ); 					p.y = fromY - ( o.height / 2 ) + ( o.y - r.y ); 			}						return p;		}			/**		 * Move DisplayObject to the specified coordinates using specfied alignment point and coordinate space. 		 * @param o The DisplayObject to move.		 * @param alignmentPoint An alignment point as defined in AlignmentPoint constants.		 * @param fromX The DisplayObject x coordinate where move. Leave empty or NaN to keep coordinates and change anly alignment point or coordinate space.		 * @param fromY The DisplayObject y coordinate where move. Leave empty or NaN to keep coordinates and change anly alignment point or coordinate space.		 * @param targetCoordinateSpace The displayObjectContainer that defined the coordinate space to use. If target is null current DisplayObject coordinate space ( its parent ) is used.		 * @param useGetBounds By default object is move using DisplayObject.getRect() method, set useGetBounds to true to use DisplayObect.getBounds() insteadof DisplayObject.getRect().		 * 		 * @see AlignmentPoint		 */		public static function move ( o : DisplayObject , alignmentPoint : String , x : Number = NaN , y : Number = NaN , targetCoordinateSpace : DisplayObjectContainer = null , useGetBounds : Boolean = false ) : void		{			var p : Point = getAlignmentPoint( o , alignmentPoint , targetCoordinateSpace , x , y , useGetBounds );						o.x = USE_PIXEL_SNAPPING ? Math.round( p.x ) : p.x;			o.y = USE_PIXEL_SNAPPING ? Math.round( p.y ) : p.y;			}			/**		 * Align DisplayObject to the specified with the specfied alignment point and coordinate space. 		 * @param o The DisplayObject to align.		 * @param alignmentPoint An alignment point as defined in AlignmentPoint constants.		 * @param targetCoordinateSpace The displayObjectContainer that defined the coordinate space to use. If target is null current DisplayObject coordinate space ( its parent ) is used.		 * @param useGetBounds By default object is align using DisplayObject.getRect() method, set useGetBounds to true to use DisplayObect.getBounds() insteadof DisplayObject.getRect().		 * 		 * @see AlignmentPoint		 */		public static function align ( o : DisplayObject , alignmentPoint : String , targetCoordinateSpace : DisplayObjectContainer = null , useGetBounds : Boolean = false ) : void		{			move( o , alignmentPoint , NaN , NaN , targetCoordinateSpace , useGetBounds );		}
	}
}
